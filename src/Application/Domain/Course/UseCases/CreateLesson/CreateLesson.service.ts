import { Injectable, NotFoundException } from '@nestjs/common';
import { LessonTypeOrmRepository } from 'src/Application/Repositories/Lesson/LessonTypeOrm.repository';
import { CreateLessonDto } from './CreateLesson.dto';
import { LessonEntity } from 'src/Application/Entities/Lesson.entity';
import { VideoTypeOrmRepository } from 'src/Application/Repositories/Files/Videos/VideoTypeOrm.repository';
import { ModuleTypeOrmRepository } from 'src/Application/Repositories/Module/ModuleTypeOrm.repository';

@Injectable()
export class CreateLessonService {
  constructor(
    private readonly lessonRepository: LessonTypeOrmRepository,
    private readonly videoRepository: VideoTypeOrmRepository,
    private readonly moduleRepository: ModuleTypeOrmRepository,
  ) {}

  async execute(lessonDto: CreateLessonDto) {
    // check id module exist
    const moduleExist = await this.moduleRepository.getBy({
      title: lessonDto.module_title,
    });

    if (!moduleExist) {
      throw new NotFoundException('module not found');
    }

    // check if video lesson exist
    const videoExist = await this.videoRepository.getBy({
      video_id: lessonDto.video_id,
    });

    if (!videoExist) {
      throw new NotFoundException('video not found');
    }

    const lessonEntity = Object.assign(new LessonEntity(), {
      // id the id is auto generated by typeorm
      // but this can fail in unity tests
      title: lessonDto.title,
      description: lessonDto.description,
      video: videoExist,
      create_at: new Date(),
      updated_at: new Date(),
      module: moduleExist,
    } as LessonEntity);

    const lessonCreated = await this.lessonRepository.create(lessonEntity);

    return lessonCreated;
  }
}
